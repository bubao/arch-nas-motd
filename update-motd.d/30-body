#!/bin/zsh
#
# GREETER SCRIPT FOR ARCHLINUX SRV
# https://github.com/Gazeka74/archserver-motd/blob/master/arch-greeter

#########################################
#
#		VARIABLES
#
#########################################

# Kernel information
kernel="$(uname -sr)"

# Uptime
uptime="$(uptime -p | sed 's/up //;s/,//g')"

# Numbers of packages installed
packages="$(pacman -Q | wc -l)"

# Numbers of updates pending
updates_count="$(checkupdates | wc -l)"

# Numbers of IP bannedi

# f2b="$(sudo fail2ban-client status sshd | grep 'Currently banned' | rev | cut -f 1 | rev)"
# banned="$f2b IP banned"
# f2b="$(sudo fail2ban-client status sshd | grep 'Currently banned' | rev | cut -f 1 | rev)"
# banned="IP banned"

# Text to be displayed
if (( $updates_count > 0 )); then
	updates="$updates_count updates pending"
else
	updates="$updates_count update pending" 
fi

## Filesystem
# Number of '-' to be displayed on the filesystem occupation
number=30

# 3T self
read self_a self_s self_m self_pcent<<< "$(df -h --output=avail,size,target,pcent /home/bubao/disk/data1 | tail -1)" 

# 8T nas
read nas_a nas_s nas_m nas_pcent<<< "$(df -h --output=avail,size,target,pcent /home/bubao/disk/data2 | tail -1)"

# /boot
read boot_a boot_s boot_m boot_pcent <<< "$(df -h --output=avail,size,target,pcent /boot | tail -1)"

# /
read root_a root_s root_m root_pcent<<< "$(df -h --output=avail,size,target,pcent / | tail -1)"

# get free memory
read USED FREE TOTAL <<<$(free -htm | grep "Mem" | awk {'print $3,$4,$2'})
read USEDSW FREESW TOTALSW <<<$(free -htm | grep "Swap" | awk {'print $3,$4,$2'})

# get processes
PROCESS=`ps -eo user=|sort|uniq -c | awk '{ print $2 " " $1 }'`
PROCESS_ALL=`echo "$PROCESS"| awk {'print $2'} | awk '{ SUM += $1} END { print SUM }'`
PROCESS_ROOT=`echo "$PROCESS"| grep root | awk {'print $2'}`
PROCESS_USER=`echo "$PROCESS"| grep -v root | awk {'print $2'} | awk '{ SUM += $1} END { print SUM }'`

## Colors
bold="\033[01;1m"
black="\033[01;36m"
red="\033[01;31m"
green="\033[01;32m"
yellow="\033[01;33m"
blue="\033[01;34m"
magenta="\033[01;35m"
cyan="\033[01;36m"
white="\033[01;37m"
reset="\033[0m"

beg="${c1} ${c0}"			# in front of information
c0="${reset}${blue}${bold}"		# logo + text 1 color
c1="${reset}${white}${bold}"		# text 2 color
upd_color=""				# updates based on amount

#########################################
#
#		FUNCTIONS
#
#########################################

# Displays a progression bar of the FS depending on the available space and the total space
# $PARAM1 = percentage used
bar () {
	temp1="${1%?}"			# Remove last character
	temp2=$(($temp1*$number/100))	# Number of #

	str="["				# Initiate

	# Add a color to the output
	if (($temp1 > 75)); then
		str+="${red}"
	elif (($temp1 > 50)); then
		str+="${yellow}"
	elif (($temp1 > 25)); then
		str+="${green}"
	else 
		str+="${white}"
	fi
	# Fill with '#'
	for i in $(seq 1 $temp2)
	do
		str+="="
	done

	# reset the color
	str+="${white}"

	# Fill with '-'
	for i in $(seq $temp2 $number)
	do
		str+="-"
	done
	str+="]"
	echo $str
}

self_bar=$(bar $self_pcent)
nas_bar=$(bar $nas_pcent)
boot_bar=$(bar $boot_pcent)
root_bar=$(bar $root_pcent)

## Memory

while IFS=":" read -r a b; do
	case $a in
		"MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
		"Shmem") ((mem_used+=${b/kB}))  ;;
		"MemFree" | "Buffers" | "Cached" | "SReclaimable")
			mem_used="$((mem_used-=${b/kB}))"
		;;
		# Available since Linux 3.14rc (34e431b0ae398fc54ea69ff85ec700722c9da773).
		# If detected this will be used over the above calculation for mem_used.
		"MemAvailable")
			mem_avail=${b/kB}
		;;
	esac
done < /proc/meminfo

if [[ $mem_avail ]]; then
	mem_used=$(((mem_total - mem_avail) / 1024))
else
	mem_used="$((mem_used / 1024))"
fi

mem_total="$((mem_total / 1024))"

mem_perc="$((mem_used * 100 / mem_total))"

mem_used=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_used 1024")
mem_total=$(awk '{printf "%.2f", $1 / $2}' <<< "$mem_total 1024")
mem_label=GiB

memory="${yellow}${mem_used}${mem_label:-MiB} ${white}/ ${blue}${mem_total}${mem_label:-MiB} ${white}${mem_perc:+(${mem_perc}%)}"

memory_bar="$(bar "${mem_perc}%")"


#########################################
#
#		PROCESSING		
#
#########################################

# Setting updates color 
if (( $updates_count > 15 )); then
	upd_color="${reset}${red}"
elif (( $updates_count > 5 )); then
	upd_color="${reset}${yellow}"
else
	upd_color="${reset}${white}"
fi

cpu=`cat /proc/cpuinfo | grep "name" | uniq | cut -d ":" -f2 | sed 's/ //;s/(TM)//g;s/(R)//g;s/CPU//;s/  / /'`
proc="${yellow}$PROCESS_ROOT${c1} (r), ${yellow}$PROCESS_USER${c1} (u) | ${yellow}$PROCESS_ALL${c1} (t)"

echo -e "${white}${bold}--------------------------------------------------------------------------------
${c0}                    -\`
${c0}                   .o+\`			
${c0}                  \`ooo/			
${c0}                 \`+oooo:		${white}               #     ${blue}| *
${c0}                \`+oooooo:		${white} a##e #%\" a#\"e 6##%  ${blue}| | |-^-. |   | \\ /
${c0}                -+oooooo+:		${white}.oOo# #   #    #  #  ${blue}| | |   | |   |  X
${c0}             \`/:-:++oooo+:		${white}%OoO# #   %#e\" #  #  ${blue}| | |   | ^._.| / \\ TM	
${c0}             \`/++++/+++++++:		${white}----------------------------------------	 	
${c0}            \`/++++++++++++++:		${beg}KERNEL:${c1}${kernel}
${c0}           \`/+++ooooooooooooo/\`		${beg}UPTIME:${c1}${uptime}
${c0}          ./ooosssso++osssssso+\`	${beg}PACKAGES:${c1}${packages}
${c0}         .oossssso-\`\`\`\`/ossssss+\`	${beg}UPDATES:${upd_color}${updates}
${c0}        -osssssso.      :ssssssso.	${beg}Proc:${c1}${proc}
${c0}       :osssssss/        osssso+++.	${beg}CPU:${c1}${cpu}
${c0}      /ossssssss/        +ssssooo/-	${beg}Memory:${memory}
${c0}    \`/ossssso+/:-        -:/+osssso+-	${beg}${c1}${memory_bar}
${c0}   \`+sso+:-\`                 \`.-/+oso:
${c0}  \`++:.                           \`-/+/
${c0}  .\`                                 \`/
${white}${bold}--------------------------------------------------------------------------------
FILESYSTEM		TOTAL	AVAIL	USED
$root_m			$root_s	$root_a	$root_pcent	${root_bar}
$boot_m			$boot_s	$boot_a	$boot_pcent	${boot_bar}
$self_m	$self_s	$self_a	$self_pcent	${self_bar}
$nas_m	$nas_s	$nas_a	$nas_pcent	${nas_bar}
${white}${bold}--------------------------------------------------------------------------------"
